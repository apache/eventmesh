/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//group 'org.apache.eventmesh'
//version '1.2.0-SNAPSHOT'

List spring_framework = [
    "org.springframework.boot:spring-boot-starter-web:2.1.6.RELEASE"
]

dependencies {
//    compile log4j2, sl4j
//    testCompile log4j2, sl4j
    implementation project(":eventmesh-sdk-java")
    implementation project(":eventmesh-connector-plugin:eventmesh-connector-api")
    implementation spring_framework
    testImplementation project(":eventmesh-sdk-java")
    testImplementation project(":eventmesh-connector-plugin:eventmesh-connector-api")
    testImplementation spring_framework
}

configurations.all {
    exclude group: "ch.qos.logback"
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

task testdist(dependsOn: ['jar']) {

    doFirst {
        BasicTest
        new File(projectDir.getPath(), 'dist/bin').mkdirs()
        new File(projectDir.getPath(), 'dist/apps').mkdirs()
        new File(projectDir.getPath(), 'dist/conf').mkdirs()
        new File(projectDir.getPath(), 'dist/lib').mkdirs()
    }

    doLast {
        copy {
            into('dist/apps/')
            from project.jar.getArchivePath()
        }
        copy {
            into 'dist/lib'
            from project.configurations.runtime
        }

        copy {
            into 'dist/bin'
            from '../eventmesh-test/bin'
        }

        copy {
            into 'dist/conf'
            from 'conf'
        }
    }
}

task testtar(type: Tar) {
    extension = 'tar.gz'
    compression = Compression.GZIP
    archiveName = project.name + '_' + project.version + '.' + extension
    destinationDir = new File(projectDir.getPath(), 'build')
    into('/') {
        from 'dist'
    }
}

task packageTestSources(type: Jar) {
    from project.sourceSets.main.allSource
    classifier = 'sources'  // either here or in artifacts block
}

artifacts {
    archives jar
    archives packageJavadoc
    archives packageSources
}