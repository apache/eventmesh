//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: eventmesh-client.proto

//package eventmesh.common.protocol.grpc;
//
//option java_multiple_files = true;
//option java_package = "org.apache.eventmesh.common.protocol.grpc.protos";
//option java_outer_classname = "EventmeshGrpc";

// make sure the protoc and protoc-gen-go is installed on your machine, and has set
// its directory into path
// download protoc: https://github.com/protocolbuffers/protobuf/releases
// install protoc-gen-go: go install google.golang.org/protobuf/cmd/protoc-gen-go
// generate go code by protoc: protoc --go_out=. eventmesh-client.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Subscription_SubscriptionItem_SubscriptionMode int32

const (
	Subscription_SubscriptionItem_CLUSTERING   Subscription_SubscriptionItem_SubscriptionMode = 0
	Subscription_SubscriptionItem_BROADCASTING Subscription_SubscriptionItem_SubscriptionMode = 1
)

// Enum value maps for Subscription_SubscriptionItem_SubscriptionMode.
var (
	Subscription_SubscriptionItem_SubscriptionMode_name = map[int32]string{
		0: "CLUSTERING",
		1: "BROADCASTING",
	}
	Subscription_SubscriptionItem_SubscriptionMode_value = map[string]int32{
		"CLUSTERING":   0,
		"BROADCASTING": 1,
	}
)

func (x Subscription_SubscriptionItem_SubscriptionMode) Enum() *Subscription_SubscriptionItem_SubscriptionMode {
	p := new(Subscription_SubscriptionItem_SubscriptionMode)
	*p = x
	return p
}

func (x Subscription_SubscriptionItem_SubscriptionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subscription_SubscriptionItem_SubscriptionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_eventmesh_client_proto_enumTypes[0].Descriptor()
}

func (Subscription_SubscriptionItem_SubscriptionMode) Type() protoreflect.EnumType {
	return &file_eventmesh_client_proto_enumTypes[0]
}

func (x Subscription_SubscriptionItem_SubscriptionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subscription_SubscriptionItem_SubscriptionMode.Descriptor instead.
func (Subscription_SubscriptionItem_SubscriptionMode) EnumDescriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{4, 0, 0}
}

type Subscription_SubscriptionItem_SubscriptionType int32

const (
	Subscription_SubscriptionItem_ASYNC Subscription_SubscriptionItem_SubscriptionType = 0
	Subscription_SubscriptionItem_SYNC  Subscription_SubscriptionItem_SubscriptionType = 1
)

// Enum value maps for Subscription_SubscriptionItem_SubscriptionType.
var (
	Subscription_SubscriptionItem_SubscriptionType_name = map[int32]string{
		0: "ASYNC",
		1: "SYNC",
	}
	Subscription_SubscriptionItem_SubscriptionType_value = map[string]int32{
		"ASYNC": 0,
		"SYNC":  1,
	}
)

func (x Subscription_SubscriptionItem_SubscriptionType) Enum() *Subscription_SubscriptionItem_SubscriptionType {
	p := new(Subscription_SubscriptionItem_SubscriptionType)
	*p = x
	return p
}

func (x Subscription_SubscriptionItem_SubscriptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subscription_SubscriptionItem_SubscriptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_eventmesh_client_proto_enumTypes[1].Descriptor()
}

func (Subscription_SubscriptionItem_SubscriptionType) Type() protoreflect.EnumType {
	return &file_eventmesh_client_proto_enumTypes[1]
}

func (x Subscription_SubscriptionItem_SubscriptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subscription_SubscriptionItem_SubscriptionType.Descriptor instead.
func (Subscription_SubscriptionItem_SubscriptionType) EnumDescriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{4, 0, 1}
}

type Heartbeat_ClientType int32

const (
	Heartbeat_PUB Heartbeat_ClientType = 0
	Heartbeat_SUB Heartbeat_ClientType = 1
)

// Enum value maps for Heartbeat_ClientType.
var (
	Heartbeat_ClientType_name = map[int32]string{
		0: "PUB",
		1: "SUB",
	}
	Heartbeat_ClientType_value = map[string]int32{
		"PUB": 0,
		"SUB": 1,
	}
)

func (x Heartbeat_ClientType) Enum() *Heartbeat_ClientType {
	p := new(Heartbeat_ClientType)
	*p = x
	return p
}

func (x Heartbeat_ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Heartbeat_ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_eventmesh_client_proto_enumTypes[2].Descriptor()
}

func (Heartbeat_ClientType) Type() protoreflect.EnumType {
	return &file_eventmesh_client_proto_enumTypes[2]
}

func (x Heartbeat_ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Heartbeat_ClientType.Descriptor instead.
func (Heartbeat_ClientType) EnumDescriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{5, 0}
}

type RequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env             string `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	Region          string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Idc             string `protobuf:"bytes,3,opt,name=idc,proto3" json:"idc,omitempty"`
	Ip              string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Pid             string `protobuf:"bytes,5,opt,name=pid,proto3" json:"pid,omitempty"`
	Sys             string `protobuf:"bytes,6,opt,name=sys,proto3" json:"sys,omitempty"`
	Username        string `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	Password        string `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	Language        string `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`
	ProtocolType    string `protobuf:"bytes,10,opt,name=protocolType,proto3" json:"protocolType,omitempty"`
	ProtocolVersion string `protobuf:"bytes,11,opt,name=protocolVersion,proto3" json:"protocolVersion,omitempty"`
	ProtocolDesc    string `protobuf:"bytes,12,opt,name=protocolDesc,proto3" json:"protocolDesc,omitempty"`
}

func (x *RequestHeader) Reset() {
	*x = RequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventmesh_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHeader) ProtoMessage() {}

func (x *RequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_eventmesh_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHeader.ProtoReflect.Descriptor instead.
func (*RequestHeader) Descriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{0}
}

func (x *RequestHeader) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *RequestHeader) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RequestHeader) GetIdc() string {
	if x != nil {
		return x.Idc
	}
	return ""
}

func (x *RequestHeader) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RequestHeader) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *RequestHeader) GetSys() string {
	if x != nil {
		return x.Sys
	}
	return ""
}

func (x *RequestHeader) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RequestHeader) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RequestHeader) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RequestHeader) GetProtocolType() string {
	if x != nil {
		return x.ProtocolType
	}
	return ""
}

func (x *RequestHeader) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *RequestHeader) GetProtocolDesc() string {
	if x != nil {
		return x.ProtocolDesc
	}
	return ""
}

type SimpleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *RequestHeader    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ProducerGroup string            `protobuf:"bytes,2,opt,name=producerGroup,proto3" json:"producerGroup,omitempty"`
	Topic         string            `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Content       string            `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Ttl           string            `protobuf:"bytes,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	UniqueId      string            `protobuf:"bytes,6,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`
	SeqNum        string            `protobuf:"bytes,7,opt,name=seqNum,proto3" json:"seqNum,omitempty"`
	Tag           string            `protobuf:"bytes,8,opt,name=tag,proto3" json:"tag,omitempty"`
	Properties    map[string]string `protobuf:"bytes,9,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SimpleMessage) Reset() {
	*x = SimpleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventmesh_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMessage) ProtoMessage() {}

func (x *SimpleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_eventmesh_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMessage.ProtoReflect.Descriptor instead.
func (*SimpleMessage) Descriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{1}
}

func (x *SimpleMessage) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SimpleMessage) GetProducerGroup() string {
	if x != nil {
		return x.ProducerGroup
	}
	return ""
}

func (x *SimpleMessage) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SimpleMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SimpleMessage) GetTtl() string {
	if x != nil {
		return x.Ttl
	}
	return ""
}

func (x *SimpleMessage) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *SimpleMessage) GetSeqNum() string {
	if x != nil {
		return x.SeqNum
	}
	return ""
}

func (x *SimpleMessage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SimpleMessage) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type BatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *RequestHeader              `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ProducerGroup string                      `protobuf:"bytes,2,opt,name=producerGroup,proto3" json:"producerGroup,omitempty"`
	Topic         string                      `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	MessageItem   []*BatchMessage_MessageItem `protobuf:"bytes,4,rep,name=messageItem,proto3" json:"messageItem,omitempty"`
}

func (x *BatchMessage) Reset() {
	*x = BatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventmesh_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMessage) ProtoMessage() {}

func (x *BatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_eventmesh_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMessage.ProtoReflect.Descriptor instead.
func (*BatchMessage) Descriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{2}
}

func (x *BatchMessage) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BatchMessage) GetProducerGroup() string {
	if x != nil {
		return x.ProducerGroup
	}
	return ""
}

func (x *BatchMessage) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *BatchMessage) GetMessageItem() []*BatchMessage_MessageItem {
	if x != nil {
		return x.MessageItem
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespCode string `protobuf:"bytes,1,opt,name=respCode,proto3" json:"respCode,omitempty"`
	RespMsg  string `protobuf:"bytes,2,opt,name=respMsg,proto3" json:"respMsg,omitempty"`
	RespTime string `protobuf:"bytes,3,opt,name=respTime,proto3" json:"respTime,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventmesh_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_eventmesh_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetRespCode() string {
	if x != nil {
		return x.RespCode
	}
	return ""
}

func (x *Response) GetRespMsg() string {
	if x != nil {
		return x.RespMsg
	}
	return ""
}

func (x *Response) GetRespTime() string {
	if x != nil {
		return x.RespTime
	}
	return ""
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header            *RequestHeader                   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ConsumerGroup     string                           `protobuf:"bytes,2,opt,name=consumerGroup,proto3" json:"consumerGroup,omitempty"`
	SubscriptionItems []*Subscription_SubscriptionItem `protobuf:"bytes,3,rep,name=subscriptionItems,proto3" json:"subscriptionItems,omitempty"`
	Url               string                           `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Reply             *Subscription_Reply              `protobuf:"bytes,5,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventmesh_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_eventmesh_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{4}
}

func (x *Subscription) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Subscription) GetConsumerGroup() string {
	if x != nil {
		return x.ConsumerGroup
	}
	return ""
}

func (x *Subscription) GetSubscriptionItems() []*Subscription_SubscriptionItem {
	if x != nil {
		return x.SubscriptionItems
	}
	return nil
}

func (x *Subscription) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Subscription) GetReply() *Subscription_Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *RequestHeader             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ClientType     Heartbeat_ClientType       `protobuf:"varint,2,opt,name=clientType,proto3,enum=eventmesh.common.protocol.grpc.Heartbeat_ClientType" json:"clientType,omitempty"`
	ProducerGroup  string                     `protobuf:"bytes,3,opt,name=producerGroup,proto3" json:"producerGroup,omitempty"`
	ConsumerGroup  string                     `protobuf:"bytes,4,opt,name=consumerGroup,proto3" json:"consumerGroup,omitempty"`
	HeartbeatItems []*Heartbeat_HeartbeatItem `protobuf:"bytes,5,rep,name=heartbeatItems,proto3" json:"heartbeatItems,omitempty"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventmesh_client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_eventmesh_client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{5}
}

func (x *Heartbeat) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Heartbeat) GetClientType() Heartbeat_ClientType {
	if x != nil {
		return x.ClientType
	}
	return Heartbeat_PUB
}

func (x *Heartbeat) GetProducerGroup() string {
	if x != nil {
		return x.ProducerGroup
	}
	return ""
}

func (x *Heartbeat) GetConsumerGroup() string {
	if x != nil {
		return x.ConsumerGroup
	}
	return ""
}

func (x *Heartbeat) GetHeartbeatItems() []*Heartbeat_HeartbeatItem {
	if x != nil {
		return x.HeartbeatItems
	}
	return nil
}

type BatchMessage_MessageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content    string            `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Ttl        string            `protobuf:"bytes,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	UniqueId   string            `protobuf:"bytes,3,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`
	SeqNum     string            `protobuf:"bytes,4,opt,name=seqNum,proto3" json:"seqNum,omitempty"`
	Tag        string            `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	Properties map[string]string `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchMessage_MessageItem) Reset() {
	*x = BatchMessage_MessageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventmesh_client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMessage_MessageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMessage_MessageItem) ProtoMessage() {}

func (x *BatchMessage_MessageItem) ProtoReflect() protoreflect.Message {
	mi := &file_eventmesh_client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMessage_MessageItem.ProtoReflect.Descriptor instead.
func (*BatchMessage_MessageItem) Descriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BatchMessage_MessageItem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *BatchMessage_MessageItem) GetTtl() string {
	if x != nil {
		return x.Ttl
	}
	return ""
}

func (x *BatchMessage_MessageItem) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *BatchMessage_MessageItem) GetSeqNum() string {
	if x != nil {
		return x.SeqNum
	}
	return ""
}

func (x *BatchMessage_MessageItem) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *BatchMessage_MessageItem) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type Subscription_SubscriptionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string                                         `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Mode  Subscription_SubscriptionItem_SubscriptionMode `protobuf:"varint,2,opt,name=mode,proto3,enum=eventmesh.common.protocol.grpc.Subscription_SubscriptionItem_SubscriptionMode" json:"mode,omitempty"`
	Type  Subscription_SubscriptionItem_SubscriptionType `protobuf:"varint,3,opt,name=type,proto3,enum=eventmesh.common.protocol.grpc.Subscription_SubscriptionItem_SubscriptionType" json:"type,omitempty"`
}

func (x *Subscription_SubscriptionItem) Reset() {
	*x = Subscription_SubscriptionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventmesh_client_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription_SubscriptionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription_SubscriptionItem) ProtoMessage() {}

func (x *Subscription_SubscriptionItem) ProtoReflect() protoreflect.Message {
	mi := &file_eventmesh_client_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription_SubscriptionItem.ProtoReflect.Descriptor instead.
func (*Subscription_SubscriptionItem) Descriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Subscription_SubscriptionItem) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Subscription_SubscriptionItem) GetMode() Subscription_SubscriptionItem_SubscriptionMode {
	if x != nil {
		return x.Mode
	}
	return Subscription_SubscriptionItem_CLUSTERING
}

func (x *Subscription_SubscriptionItem) GetType() Subscription_SubscriptionItem_SubscriptionType {
	if x != nil {
		return x.Type
	}
	return Subscription_SubscriptionItem_ASYNC
}

type Subscription_Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerGroup string            `protobuf:"bytes,1,opt,name=producerGroup,proto3" json:"producerGroup,omitempty"`
	Topic         string            `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Content       string            `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Ttl           string            `protobuf:"bytes,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	UniqueId      string            `protobuf:"bytes,5,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`
	SeqNum        string            `protobuf:"bytes,6,opt,name=seqNum,proto3" json:"seqNum,omitempty"`
	Tag           string            `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
	Properties    map[string]string `protobuf:"bytes,8,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Subscription_Reply) Reset() {
	*x = Subscription_Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventmesh_client_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription_Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription_Reply) ProtoMessage() {}

func (x *Subscription_Reply) ProtoReflect() protoreflect.Message {
	mi := &file_eventmesh_client_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription_Reply.ProtoReflect.Descriptor instead.
func (*Subscription_Reply) Descriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Subscription_Reply) GetProducerGroup() string {
	if x != nil {
		return x.ProducerGroup
	}
	return ""
}

func (x *Subscription_Reply) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Subscription_Reply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Subscription_Reply) GetTtl() string {
	if x != nil {
		return x.Ttl
	}
	return ""
}

func (x *Subscription_Reply) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *Subscription_Reply) GetSeqNum() string {
	if x != nil {
		return x.SeqNum
	}
	return ""
}

func (x *Subscription_Reply) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Subscription_Reply) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type Heartbeat_HeartbeatItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Heartbeat_HeartbeatItem) Reset() {
	*x = Heartbeat_HeartbeatItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventmesh_client_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat_HeartbeatItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat_HeartbeatItem) ProtoMessage() {}

func (x *Heartbeat_HeartbeatItem) ProtoReflect() protoreflect.Message {
	mi := &file_eventmesh_client_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat_HeartbeatItem.ProtoReflect.Descriptor instead.
func (*Heartbeat_HeartbeatItem) Descriptor() ([]byte, []int) {
	return file_eventmesh_client_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Heartbeat_HeartbeatItem) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Heartbeat_HeartbeatItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_eventmesh_client_proto protoreflect.FileDescriptor

var file_eventmesh_client_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x22, 0xa2, 0x03, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x5d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x04, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x5a, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0xa8, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x68, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x70,
	0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x70, 0x4d,
	0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf1,
	0x07, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6b, 0x0a, 0x11,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x1a, 0xcf, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x62, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x22, 0x27,
	0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x1a, 0xd8, 0x02, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x62, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xae, 0x03, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x12, 0x45, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5f, 0x0a, 0x0e, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x37, 0x0a, 0x0d, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x42, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55,
	0x42, 0x10, 0x01, 0x32, 0xcc, 0x02, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x12, 0x2d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2d, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x0c, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x2c, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xd1, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x2c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2c,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2d, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x65, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2c,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x28, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x74, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eventmesh_client_proto_rawDescOnce sync.Once
	file_eventmesh_client_proto_rawDescData = file_eventmesh_client_proto_rawDesc
)

func file_eventmesh_client_proto_rawDescGZIP() []byte {
	file_eventmesh_client_proto_rawDescOnce.Do(func() {
		file_eventmesh_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventmesh_client_proto_rawDescData)
	})
	return file_eventmesh_client_proto_rawDescData
}

var file_eventmesh_client_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_eventmesh_client_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_eventmesh_client_proto_goTypes = []interface{}{
	(Subscription_SubscriptionItem_SubscriptionMode)(0), // 0: eventmesh.common.protocol.grpc.Subscription.SubscriptionItem.SubscriptionMode
	(Subscription_SubscriptionItem_SubscriptionType)(0), // 1: eventmesh.common.protocol.grpc.Subscription.SubscriptionItem.SubscriptionType
	(Heartbeat_ClientType)(0),                           // 2: eventmesh.common.protocol.grpc.Heartbeat.ClientType
	(*RequestHeader)(nil),                               // 3: eventmesh.common.protocol.grpc.RequestHeader
	(*SimpleMessage)(nil),                               // 4: eventmesh.common.protocol.grpc.SimpleMessage
	(*BatchMessage)(nil),                                // 5: eventmesh.common.protocol.grpc.BatchMessage
	(*Response)(nil),                                    // 6: eventmesh.common.protocol.grpc.Response
	(*Subscription)(nil),                                // 7: eventmesh.common.protocol.grpc.Subscription
	(*Heartbeat)(nil),                                   // 8: eventmesh.common.protocol.grpc.Heartbeat
	nil,                                                 // 9: eventmesh.common.protocol.grpc.SimpleMessage.PropertiesEntry
	(*BatchMessage_MessageItem)(nil),                    // 10: eventmesh.common.protocol.grpc.BatchMessage.MessageItem
	nil,                                                 // 11: eventmesh.common.protocol.grpc.BatchMessage.MessageItem.PropertiesEntry
	(*Subscription_SubscriptionItem)(nil),               // 12: eventmesh.common.protocol.grpc.Subscription.SubscriptionItem
	(*Subscription_Reply)(nil),                          // 13: eventmesh.common.protocol.grpc.Subscription.Reply
	nil,                                                 // 14: eventmesh.common.protocol.grpc.Subscription.Reply.PropertiesEntry
	(*Heartbeat_HeartbeatItem)(nil),                     // 15: eventmesh.common.protocol.grpc.Heartbeat.HeartbeatItem
}
var file_eventmesh_client_proto_depIdxs = []int32{
	3,  // 0: eventmesh.common.protocol.grpc.SimpleMessage.header:type_name -> eventmesh.common.protocol.grpc.RequestHeader
	9,  // 1: eventmesh.common.protocol.grpc.SimpleMessage.properties:type_name -> eventmesh.common.protocol.grpc.SimpleMessage.PropertiesEntry
	3,  // 2: eventmesh.common.protocol.grpc.BatchMessage.header:type_name -> eventmesh.common.protocol.grpc.RequestHeader
	10, // 3: eventmesh.common.protocol.grpc.BatchMessage.messageItem:type_name -> eventmesh.common.protocol.grpc.BatchMessage.MessageItem
	3,  // 4: eventmesh.common.protocol.grpc.Subscription.header:type_name -> eventmesh.common.protocol.grpc.RequestHeader
	12, // 5: eventmesh.common.protocol.grpc.Subscription.subscriptionItems:type_name -> eventmesh.common.protocol.grpc.Subscription.SubscriptionItem
	13, // 6: eventmesh.common.protocol.grpc.Subscription.reply:type_name -> eventmesh.common.protocol.grpc.Subscription.Reply
	3,  // 7: eventmesh.common.protocol.grpc.Heartbeat.header:type_name -> eventmesh.common.protocol.grpc.RequestHeader
	2,  // 8: eventmesh.common.protocol.grpc.Heartbeat.clientType:type_name -> eventmesh.common.protocol.grpc.Heartbeat.ClientType
	15, // 9: eventmesh.common.protocol.grpc.Heartbeat.heartbeatItems:type_name -> eventmesh.common.protocol.grpc.Heartbeat.HeartbeatItem
	11, // 10: eventmesh.common.protocol.grpc.BatchMessage.MessageItem.properties:type_name -> eventmesh.common.protocol.grpc.BatchMessage.MessageItem.PropertiesEntry
	0,  // 11: eventmesh.common.protocol.grpc.Subscription.SubscriptionItem.mode:type_name -> eventmesh.common.protocol.grpc.Subscription.SubscriptionItem.SubscriptionMode
	1,  // 12: eventmesh.common.protocol.grpc.Subscription.SubscriptionItem.type:type_name -> eventmesh.common.protocol.grpc.Subscription.SubscriptionItem.SubscriptionType
	14, // 13: eventmesh.common.protocol.grpc.Subscription.Reply.properties:type_name -> eventmesh.common.protocol.grpc.Subscription.Reply.PropertiesEntry
	4,  // 14: eventmesh.common.protocol.grpc.PublisherService.publish:input_type -> eventmesh.common.protocol.grpc.SimpleMessage
	4,  // 15: eventmesh.common.protocol.grpc.PublisherService.requestReply:input_type -> eventmesh.common.protocol.grpc.SimpleMessage
	5,  // 16: eventmesh.common.protocol.grpc.PublisherService.batchPublish:input_type -> eventmesh.common.protocol.grpc.BatchMessage
	7,  // 17: eventmesh.common.protocol.grpc.ConsumerService.subscribe:input_type -> eventmesh.common.protocol.grpc.Subscription
	7,  // 18: eventmesh.common.protocol.grpc.ConsumerService.subscribeStream:input_type -> eventmesh.common.protocol.grpc.Subscription
	7,  // 19: eventmesh.common.protocol.grpc.ConsumerService.unsubscribe:input_type -> eventmesh.common.protocol.grpc.Subscription
	8,  // 20: eventmesh.common.protocol.grpc.HeartbeatService.heartbeat:input_type -> eventmesh.common.protocol.grpc.Heartbeat
	6,  // 21: eventmesh.common.protocol.grpc.PublisherService.publish:output_type -> eventmesh.common.protocol.grpc.Response
	4,  // 22: eventmesh.common.protocol.grpc.PublisherService.requestReply:output_type -> eventmesh.common.protocol.grpc.SimpleMessage
	6,  // 23: eventmesh.common.protocol.grpc.PublisherService.batchPublish:output_type -> eventmesh.common.protocol.grpc.Response
	6,  // 24: eventmesh.common.protocol.grpc.ConsumerService.subscribe:output_type -> eventmesh.common.protocol.grpc.Response
	4,  // 25: eventmesh.common.protocol.grpc.ConsumerService.subscribeStream:output_type -> eventmesh.common.protocol.grpc.SimpleMessage
	6,  // 26: eventmesh.common.protocol.grpc.ConsumerService.unsubscribe:output_type -> eventmesh.common.protocol.grpc.Response
	6,  // 27: eventmesh.common.protocol.grpc.HeartbeatService.heartbeat:output_type -> eventmesh.common.protocol.grpc.Response
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_eventmesh_client_proto_init() }
func file_eventmesh_client_proto_init() {
	if File_eventmesh_client_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eventmesh_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventmesh_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventmesh_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventmesh_client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventmesh_client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventmesh_client_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventmesh_client_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMessage_MessageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventmesh_client_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription_SubscriptionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventmesh_client_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription_Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventmesh_client_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat_HeartbeatItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventmesh_client_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_eventmesh_client_proto_goTypes,
		DependencyIndexes: file_eventmesh_client_proto_depIdxs,
		EnumInfos:         file_eventmesh_client_proto_enumTypes,
		MessageInfos:      file_eventmesh_client_proto_msgTypes,
	}.Build()
	File_eventmesh_client_proto = out.File
	file_eventmesh_client_proto_rawDesc = nil
	file_eventmesh_client_proto_goTypes = nil
	file_eventmesh_client_proto_depIdxs = nil
}
