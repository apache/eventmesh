// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/core/protocol/grpc (interfaces: EventMeshProducer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	connector "github.com/apache/incubator-eventmesh/eventmesh-server-go/plugin/connector"
	consts "github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/consts"
	grpc "github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/core/protocol/grpc"
	gomock "github.com/golang/mock/gomock"
)

// MockEventMeshProducer is a mock of EventMeshProducer interface.
type MockEventMeshProducer struct {
	ctrl     *gomock.Controller
	recorder *MockEventMeshProducerMockRecorder
}

// MockEventMeshProducerMockRecorder is the mock recorder for MockEventMeshProducer.
type MockEventMeshProducerMockRecorder struct {
	mock *MockEventMeshProducer
}

// NewMockEventMeshProducer creates a new mock instance.
func NewMockEventMeshProducer(ctrl *gomock.Controller) *MockEventMeshProducer {
	mock := &MockEventMeshProducer{ctrl: ctrl}
	mock.recorder = &MockEventMeshProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventMeshProducer) EXPECT() *MockEventMeshProducerMockRecorder {
	return m.recorder
}

// Reply mocks base method.
func (m *MockEventMeshProducer) Reply(arg0 grpc.SendMessageContext, arg1 *connector.SendCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reply indicates an expected call of Reply.
func (mr *MockEventMeshProducerMockRecorder) Reply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockEventMeshProducer)(nil).Reply), arg0, arg1)
}

// Request mocks base method.
func (m *MockEventMeshProducer) Request(arg0 grpc.SendMessageContext, arg1 *connector.RequestReplyCallback, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockEventMeshProducerMockRecorder) Request(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockEventMeshProducer)(nil).Request), arg0, arg1, arg2)
}

// Send mocks base method.
func (m *MockEventMeshProducer) Send(arg0 grpc.SendMessageContext, arg1 *connector.SendCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEventMeshProducerMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEventMeshProducer)(nil).Send), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockEventMeshProducer) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockEventMeshProducerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockEventMeshProducer)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockEventMeshProducer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockEventMeshProducerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEventMeshProducer)(nil).Start))
}

// Status mocks base method.
func (m *MockEventMeshProducer) Status() consts.ServiceState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(consts.ServiceState)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockEventMeshProducerMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockEventMeshProducer)(nil).Status))
}

// String mocks base method.
func (m *MockEventMeshProducer) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockEventMeshProducerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockEventMeshProducer)(nil).String))
}
