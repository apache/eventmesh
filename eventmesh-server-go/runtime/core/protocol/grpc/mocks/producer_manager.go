// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/core/protocol/grpc (interfaces: ProducerManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	grpc "github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/core/protocol/grpc"
	gomock "github.com/golang/mock/gomock"
)

// MockProducerManager is a mock of ProducerManager interface.
type MockProducerManager struct {
	ctrl     *gomock.Controller
	recorder *MockProducerManagerMockRecorder
}

// MockProducerManagerMockRecorder is the mock recorder for MockProducerManager.
type MockProducerManagerMockRecorder struct {
	mock *MockProducerManager
}

// NewMockProducerManager creates a new mock instance.
func NewMockProducerManager(ctrl *gomock.Controller) *MockProducerManager {
	mock := &MockProducerManager{ctrl: ctrl}
	mock.recorder = &MockProducerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerManager) EXPECT() *MockProducerManagerMockRecorder {
	return m.recorder
}

// CreateProducer mocks base method.
func (m *MockProducerManager) CreateProducer(arg0 *grpc.ProducerGroupConfig) (grpc.EventMeshProducer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProducer", arg0)
	ret0, _ := ret[0].(grpc.EventMeshProducer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProducer indicates an expected call of CreateProducer.
func (mr *MockProducerManagerMockRecorder) CreateProducer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProducer", reflect.TypeOf((*MockProducerManager)(nil).CreateProducer), arg0)
}

// GetProducer mocks base method.
func (m *MockProducerManager) GetProducer(arg0 string) (grpc.EventMeshProducer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducer", arg0)
	ret0, _ := ret[0].(grpc.EventMeshProducer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducer indicates an expected call of GetProducer.
func (mr *MockProducerManagerMockRecorder) GetProducer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducer", reflect.TypeOf((*MockProducerManager)(nil).GetProducer), arg0)
}

// Shutdown mocks base method.
func (m *MockProducerManager) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockProducerManagerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockProducerManager)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockProducerManager) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockProducerManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProducerManager)(nil).Start))
}
