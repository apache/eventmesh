// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/core/protocol/grpc (interfaces: EventMeshConsumer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	consts "github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/consts"
	grpc "github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/core/protocol/grpc"
	gomock "github.com/golang/mock/gomock"
)

// MockEventMeshConsumer is a mock of EventMeshConsumer interface.
type MockEventMeshConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockEventMeshConsumerMockRecorder
}

// MockEventMeshConsumerMockRecorder is the mock recorder for MockEventMeshConsumer.
type MockEventMeshConsumerMockRecorder struct {
	mock *MockEventMeshConsumer
}

// NewMockEventMeshConsumer creates a new mock instance.
func NewMockEventMeshConsumer(ctrl *gomock.Controller) *MockEventMeshConsumer {
	mock := &MockEventMeshConsumer{ctrl: ctrl}
	mock.recorder = &MockEventMeshConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventMeshConsumer) EXPECT() *MockEventMeshConsumerMockRecorder {
	return m.recorder
}

// DeRegisterClient mocks base method.
func (m *MockEventMeshConsumer) DeRegisterClient(arg0 *grpc.GroupClient) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeRegisterClient", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeRegisterClient indicates an expected call of DeRegisterClient.
func (mr *MockEventMeshConsumerMockRecorder) DeRegisterClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeRegisterClient", reflect.TypeOf((*MockEventMeshConsumer)(nil).DeRegisterClient), arg0)
}

// Init mocks base method.
func (m *MockEventMeshConsumer) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockEventMeshConsumerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockEventMeshConsumer)(nil).Init))
}

// RegisterClient mocks base method.
func (m *MockEventMeshConsumer) RegisterClient(arg0 *grpc.GroupClient) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterClient", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RegisterClient indicates an expected call of RegisterClient.
func (mr *MockEventMeshConsumerMockRecorder) RegisterClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClient", reflect.TypeOf((*MockEventMeshConsumer)(nil).RegisterClient), arg0)
}

// ServiceState mocks base method.
func (m *MockEventMeshConsumer) ServiceState() consts.ServiceState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceState")
	ret0, _ := ret[0].(consts.ServiceState)
	return ret0
}

// ServiceState indicates an expected call of ServiceState.
func (mr *MockEventMeshConsumerMockRecorder) ServiceState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceState", reflect.TypeOf((*MockEventMeshConsumer)(nil).ServiceState))
}

// Shutdown mocks base method.
func (m *MockEventMeshConsumer) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockEventMeshConsumerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockEventMeshConsumer)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockEventMeshConsumer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockEventMeshConsumerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEventMeshConsumer)(nil).Start))
}
