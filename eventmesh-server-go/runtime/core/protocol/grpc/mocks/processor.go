// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/core/protocol/grpc (interfaces: Processor)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	grpc "github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/core/protocol/grpc"
	pb "github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/proto/pb"
	gomock "github.com/golang/mock/gomock"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// AsyncMessage mocks base method.
func (m *MockProcessor) AsyncMessage(arg0 context.Context, arg1 *grpc.GRPCContext, arg2 *pb.SimpleMessage) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsyncMessage indicates an expected call of AsyncMessage.
func (mr *MockProcessorMockRecorder) AsyncMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncMessage", reflect.TypeOf((*MockProcessor)(nil).AsyncMessage), arg0, arg1, arg2)
}

// BatchPublish mocks base method.
func (m *MockProcessor) BatchPublish(arg0 context.Context, arg1 *grpc.GRPCContext, arg2 *pb.BatchMessage) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPublish", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPublish indicates an expected call of BatchPublish.
func (mr *MockProcessorMockRecorder) BatchPublish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPublish", reflect.TypeOf((*MockProcessor)(nil).BatchPublish), arg0, arg1, arg2)
}

// Heartbeat mocks base method.
func (m *MockProcessor) Heartbeat(arg0 *grpc.GRPCContext, arg1 *pb.Heartbeat) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockProcessorMockRecorder) Heartbeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockProcessor)(nil).Heartbeat), arg0, arg1)
}

// ReplyMessage mocks base method.
func (m *MockProcessor) ReplyMessage(arg0 context.Context, arg1 *grpc.GRPCContext, arg2 grpc.EventEmitter, arg3 *pb.SimpleMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyMessage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyMessage indicates an expected call of ReplyMessage.
func (mr *MockProcessorMockRecorder) ReplyMessage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyMessage", reflect.TypeOf((*MockProcessor)(nil).ReplyMessage), arg0, arg1, arg2, arg3)
}

// RequestReplyMessage mocks base method.
func (m *MockProcessor) RequestReplyMessage(arg0 context.Context, arg1 *grpc.GRPCContext, arg2 *pb.SimpleMessage) (*pb.SimpleMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReplyMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pb.SimpleMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestReplyMessage indicates an expected call of RequestReplyMessage.
func (mr *MockProcessorMockRecorder) RequestReplyMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReplyMessage", reflect.TypeOf((*MockProcessor)(nil).RequestReplyMessage), arg0, arg1, arg2)
}

// Subscribe mocks base method.
func (m *MockProcessor) Subscribe(arg0 *grpc.GRPCContext, arg1 *pb.Subscription) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockProcessorMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockProcessor)(nil).Subscribe), arg0, arg1)
}

// SubscribeStream mocks base method.
func (m *MockProcessor) SubscribeStream(arg0 context.Context, arg1 *grpc.GRPCContext, arg2 grpc.EventEmitter, arg3 *pb.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeStream indicates an expected call of SubscribeStream.
func (mr *MockProcessorMockRecorder) SubscribeStream(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeStream", reflect.TypeOf((*MockProcessor)(nil).SubscribeStream), arg0, arg1, arg2, arg3)
}

// UnSubscribe mocks base method.
func (m *MockProcessor) UnSubscribe(arg0 *grpc.GRPCContext, arg1 *pb.Subscription) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnSubscribe indicates an expected call of UnSubscribe.
func (mr *MockProcessorMockRecorder) UnSubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribe", reflect.TypeOf((*MockProcessor)(nil).UnSubscribe), arg0, arg1)
}
