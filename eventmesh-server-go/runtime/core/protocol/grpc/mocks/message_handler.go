// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/core/protocol/grpc (interfaces: MessageHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	grpc "github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/core/protocol/grpc"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockMessageHandler) Handler(arg0 *grpc.MessageContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockMessageHandlerMockRecorder) Handler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockMessageHandler)(nil).Handler), arg0)
}
