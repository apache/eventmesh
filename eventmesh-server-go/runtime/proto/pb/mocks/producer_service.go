// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/proto/pb (interfaces: PublisherServiceServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/apache/incubator-eventmesh/eventmesh-server-go/runtime/proto/pb"
	gomock "github.com/golang/mock/gomock"
)

// MockPublisherServiceServer is a mock of PublisherServiceServer interface.
type MockPublisherServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherServiceServerMockRecorder
}

// MockPublisherServiceServerMockRecorder is the mock recorder for MockPublisherServiceServer.
type MockPublisherServiceServerMockRecorder struct {
	mock *MockPublisherServiceServer
}

// NewMockPublisherServiceServer creates a new mock instance.
func NewMockPublisherServiceServer(ctrl *gomock.Controller) *MockPublisherServiceServer {
	mock := &MockPublisherServiceServer{ctrl: ctrl}
	mock.recorder = &MockPublisherServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisherServiceServer) EXPECT() *MockPublisherServiceServerMockRecorder {
	return m.recorder
}

// BatchPublish mocks base method.
func (m *MockPublisherServiceServer) BatchPublish(arg0 context.Context, arg1 *pb.BatchMessage) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPublish", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPublish indicates an expected call of BatchPublish.
func (mr *MockPublisherServiceServerMockRecorder) BatchPublish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPublish", reflect.TypeOf((*MockPublisherServiceServer)(nil).BatchPublish), arg0, arg1)
}

// Publish mocks base method.
func (m *MockPublisherServiceServer) Publish(arg0 context.Context, arg1 *pb.SimpleMessage) (*pb.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherServiceServerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisherServiceServer)(nil).Publish), arg0, arg1)
}

// RequestReply mocks base method.
func (m *MockPublisherServiceServer) RequestReply(arg0 context.Context, arg1 *pb.SimpleMessage) (*pb.SimpleMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReply", arg0, arg1)
	ret0, _ := ret[0].(*pb.SimpleMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestReply indicates an expected call of RequestReply.
func (mr *MockPublisherServiceServerMockRecorder) RequestReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReply", reflect.TypeOf((*MockPublisherServiceServer)(nil).RequestReply), arg0, arg1)
}

// mustEmbedUnimplementedPublisherServiceServer mocks base method.
func (m *MockPublisherServiceServer) mustEmbedUnimplementedPublisherServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPublisherServiceServer")
}

// mustEmbedUnimplementedPublisherServiceServer indicates an expected call of mustEmbedUnimplementedPublisherServiceServer.
func (mr *MockPublisherServiceServerMockRecorder) mustEmbedUnimplementedPublisherServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPublisherServiceServer", reflect.TypeOf((*MockPublisherServiceServer)(nil).mustEmbedUnimplementedPublisherServiceServer))
}
