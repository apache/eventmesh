/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.concurrent.TimeUnit

apply plugin: 'java'
apply plugin: "maven"
apply plugin: "eclipse"
apply plugin: "idea"

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    maven {
        url "https://maven.aliyun.com/repository/public"
    }
    mavenCentral()
}

List defibus = [
    "com.webank.defibus:defibus-client:$defibus_version",
    "com.webank.defibus:defibus-common:$defibus_version"
]

List junit = [
    "junit:junit:4.12"
]

List log4j2 = [
    "org.apache.logging.log4j:log4j-api:2.13.3",
    "org.apache.logging.log4j:log4j-core:2.13.3",
    "org.apache.logging.log4j:log4j-slf4j-impl:2.13.3",
    "org.apache.logging.log4j:log4j-web:2.13.3",
    "com.lmax:disruptor:3.4.2"
]

List sl4j = [
    "org.slf4j:slf4j-api:1.7.30"
]

List metrics = [
    "io.dropwizard.metrics:metrics-core:4.1.0",
    "io.dropwizard.metrics:metrics-healthchecks:4.1.0",
    "io.dropwizard.metrics:metrics-annotation:4.1.0",
    "io.dropwizard.metrics:metrics-json:4.1.0"
]

dependencies {
    compile project(":eventmesh-common")
    testCompile project(":eventmesh-common")
    compile defibus, metrics, log4j2, sl4j
    testCompile defibus, metrics, log4j2, sl4j, junit
}

clean.doFirst {
    delete 'build'
    delete 'dist'
}

def versionString = project.version
if (project.findProperty("buildNo") instanceof String) {
    versionString = project.version + '_' + project.property("buildNo")
}

task zip(type: Zip, dependsOn: ['clean', 'jar']) {
    extension = 'zip'
    archiveName = project.name + '_' + versionString + '.' + extension
    destinationDir = new File(projectDir, 'dist')

    into('apps') {
        from project.jar.getArchivePath()
    }

    into('bin') {
        from 'bin'
    }

    into('conf') {
        from "conf"
    }

    into('lib') {
        from project.configurations.runtime
        exclude '**/*.properties*'
        exclude '**/*testng*.jar'
        exclude '**/*powermock*.jar'
        exclude '**/*mockito*.jar'
        exclude '**/*junit*.jar'
        exclude '**/*jacoco*.jar'
        exclude '**/*log4j2.xml*'
        exclude '**/spring-boot-devtools*.jar'
    }

    into('scripts') {
        from "scripts"
    }
}

task tar(type: Tar, dependsOn: ['clean', 'jar']) {
    extension = 'tar.gz'
    compression = Compression.GZIP
    archiveName = project.name + '_' + versionString + '.' + extension
    destinationDir = new File(projectDir, 'dist')

    into('apps') {
        from project.jar.getArchivePath()
    }

    into('bin') {
        from 'bin'
    }

    into('conf') {
        from "conf"
    }

    into('lib') {
        from project.configurations.runtime
        exclude '**/*.properties*'
        exclude '**/*testng*.jar'
        exclude '**/*powermock*.jar'
        exclude '**/*mockito*.jar'
        exclude '**/*junit*.jar'
        exclude '**/*jacoco*.jar'
        exclude '**/*log4j2.xml*'
        exclude '**/spring-boot-devtools*.jar'
    }

    into('scripts') {
        from "scripts"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            snapshotRepository(url: 'Your target repo address') {
                authentication(userName: 'Your user name', password: 'Your password')
            }
            repository(url: 'Your target repo address') {
                authentication(userName: 'Your user name', password: 'Your password')
            }
        }
    }
}